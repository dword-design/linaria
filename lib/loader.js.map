{"version":3,"sources":["../src/loader.js"],"names":["fs","require","path","mkdirp","normalize","loaderUtils","enhancedResolve","findYarnWorkspaceRoot","Module","transform","workspaceRoot","module","exports","loader","content","inputSourceMap","getOptions","sourceMap","cacheDirectory","preprocessor","rest","root","process","cwd","outputFilename","join","isAbsolute","relative","resourcePath","replace","resolveOptions","extensions","resolveSync","create","sync","_compilation","options","resolve","alias","modules","result","originalResolveFilename","_resolveFilename","id","filename","dirname","undefined","pluginOptions","cssText","Buffer","from","cssSourceMapText","toString","dependencies","length","forEach","dep","f","addDependency","e","console","warn","currentCssText","readFileSync","writeFileSync","callback","code"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst fs = require('fs');\nconst path = require('path');\nconst mkdirp = require('mkdirp');\nconst normalize = require('normalize-path');\nconst loaderUtils = require('loader-utils');\nconst enhancedResolve = require('enhanced-resolve/lib/node');\nconst findYarnWorkspaceRoot = require('find-yarn-workspace-root');\nconst Module = require('./babel/module');\nconst transform = require('./transform');\n\nconst workspaceRoot = findYarnWorkspaceRoot();\n\nmodule.exports = function loader(content: string, inputSourceMap: ?Object) {\n  const {\n    sourceMap,\n    cacheDirectory = '.linaria-cache',\n    preprocessor,\n    ...rest\n  } = loaderUtils.getOptions(this) || {};\n\n  const root = workspaceRoot !== null ? workspaceRoot : process.cwd();\n\n  const outputFilename = path.join(\n    path.isAbsolute(cacheDirectory)\n      ? cacheDirectory\n      : path.join(process.cwd(), cacheDirectory),\n    path.relative(root, this.resourcePath.replace(/\\.[^.]+$/, '.linaria.css'))\n  );\n\n  const resolveOptions = {\n    extensions: ['.js', '.jsx', '.ts', '.tsx', '.json'],\n  };\n\n  const resolveSync = enhancedResolve.create.sync(\n    // this._compilation is a deprecated API\n    // However there seems to be no other way to access webpack's resolver\n    // There is this.resolve, but it's asynchronous\n    // Another option is to read the webpack.config.js, but it won't work for programmatic usage\n    // This API is used by many loaders/plugins, so hope we're safe for a while\n    this._compilation && this._compilation.options.resolve\n      ? {\n          ...resolveOptions,\n          alias: this._compilation.options.resolve.alias,\n          modules: this._compilation.options.resolve.modules,\n        }\n      : resolveOptions\n  );\n\n  let result;\n\n  const originalResolveFilename = Module._resolveFilename;\n\n  try {\n    // Use webpack's resolution when evaluating modules\n    Module._resolveFilename = (id, { filename }) =>\n      resolveSync(path.dirname(filename), id);\n\n    result = transform(content, {\n      filename: this.resourcePath,\n      inputSourceMap: inputSourceMap != null ? inputSourceMap : undefined,\n      outputFilename,\n      pluginOptions: rest,\n      preprocessor,\n    });\n  } finally {\n    // Restore original behaviour\n    Module._resolveFilename = originalResolveFilename;\n  }\n\n  if (result.cssText) {\n    let { cssText } = result;\n\n    if (sourceMap) {\n      cssText += `/*# sourceMappingURL=data:application/json;base64,${Buffer.from(\n        result.cssSourceMapText || ''\n      ).toString('base64')}*/`;\n    }\n\n    if (result.dependencies && result.dependencies.length) {\n      result.dependencies.forEach(dep => {\n        try {\n          const f = resolveSync(path.dirname(this.resourcePath), dep);\n\n          this.addDependency(f);\n        } catch (e) {\n          console.warn(`[linaria] failed to add dependency for: ${dep}`, e);\n        }\n      });\n    }\n\n    // Read the file first to compare the content\n    // Write the new content only if it's changed\n    // This will prevent unnecessary WDS reloads\n    let currentCssText;\n\n    try {\n      currentCssText = fs.readFileSync(outputFilename, 'utf-8');\n    } catch (e) {\n      // Ignore error\n    }\n\n    if (currentCssText !== cssText) {\n      mkdirp.sync(path.dirname(outputFilename));\n      fs.writeFileSync(outputFilename, cssText);\n    }\n\n    this.callback(\n      null,\n      `${result.code}\\n\\nrequire(\"${normalize(outputFilename)}\");`,\n      result.sourceMap\n    );\n    return;\n  }\n\n  this.callback(null, result.code, result.sourceMap);\n};\n"],"file":"loader.js"}